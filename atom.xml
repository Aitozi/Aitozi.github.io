<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aitozi</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="yoursite.com/"/>
  <updated>2017-09-08T17:36:11.000Z</updated>
  <id>yoursite.com/</id>
  
  <author>
    <name>aitozi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo tutorial</title>
    <link href="yoursite.com/2017/09/09/hello-world/"/>
    <id>yoursite.com/2017/09/09/hello-world/</id>
    <published>2017-09-08T17:36:11.000Z</published>
    <updated>2017-09-08T17:36:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 写文章常用语法</p>
<a id="more"></a>
<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<p>###Create a page </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new page tags</div></pre></td></tr></table></figure>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo 写文章常用语法&lt;/p&gt;
    
    </summary>
    
      <category term="常用命令" scheme="yoursite.com/categories/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="hexo" scheme="yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>flink-latency-tracker</title>
    <link href="yoursite.com/2017/09/09/flink-latency-tracker/"/>
    <id>yoursite.com/2017/09/09/flink-latency-tracker/</id>
    <published>2017-09-08T16:47:35.000Z</published>
    <updated>2017-09-08T17:20:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于Flink中的Latency track</p>
<a id="more"></a>
<p><strong>目的:</strong> 为了监控Flink数据端到端的数据延迟</p>
<p><strong>解决方案:</strong></p>
<ol>
<li>定时在source处定时的发送一个特殊的event，类似于watermark的处理方式，这里叫做LatencyMark。</li>
<li>latencyMarker仅在source处产生,latencyMarker对象包含的是source operator的区分标志 subIndex以及vertexID（根据subIndex以及vertexID区分是否是同一个Marker）以及携带了发送的时间</li>
<li>LatencyMark在各个operator间传递，在每个operator处将会比较LatencyMark和它当前的系统时间来决定延迟的大小，并存入LatencyGauge，每一个operator都会维护这样一个Metric（因此LatencyMark的实现就是基于TM和JM集群的机器系统时间是进行过同步的）</li>
<li>当Operator有多个Output的时候，他会随机选择一个来发送，这确保了每一个Marker在整个流中只会出现一次，repartition也不会导致LatencyMark的数量暴增。<br>在sink operator处会维护source的最近128个latencyMarker，通过一个LatencyGauge来展示</li>
</ol>
<p><strong>具体实现:</strong></p>
<p>默认latencyTrackingInterval是2000，也就是2s发送一个LatencyMarker。在StreamSource中判断，如果开启了latency track.那么就会定期发送LatencyMarker。</p>
<p>在StreamSource（Operator）中的定时发送</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">latencyMarkTimer = processingTimeService.scheduleAtFixedRate(</div><div class="line">   <span class="keyword">new</span> ProcessingTimeCallback() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProcessingTime</span><span class="params">(<span class="keyword">long</span> timestamp)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">         <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// ProcessingTimeService callbacks are executed under the checkpointing lock</span></div><div class="line">            output.emitLatencyMarker(<span class="keyword">new</span> LatencyMarker(timestamp, vertexID, subtaskIndex));</div><div class="line">         &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">            <span class="comment">// we catch the Throwables here so that we don't trigger the processing</span></div><div class="line">            <span class="comment">// timer services async exception handler</span></div><div class="line">            LOG.warn(<span class="string">"Error while emitting latency marker."</span>, t);</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">   &#125;,</div><div class="line">   <span class="number">0L</span>,</div><div class="line">   latencyTrackingInterval);</div></pre></td></tr></table></figure>
<p>在Operator中处理：首先进行LatencyMarker处理再发送，<br>在AbstractStreamOperator类中定义的latencyMarker处理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reportLatency</span><span class="params">(LatencyMarker marker, <span class="keyword">boolean</span> isSink)</span> </span>&#123;</div><div class="line">   LatencySourceDescriptor sourceDescriptor = LatencySourceDescriptor.of(marker, !isSink);</div><div class="line">   DescriptiveStatistics sourceStats = latencyStats.get(sourceDescriptor);</div><div class="line">   <span class="keyword">if</span> (sourceStats == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="comment">// 512 element window (4 kb)</span></div><div class="line">      sourceStats = <span class="keyword">new</span> DescriptiveStatistics(<span class="keyword">this</span>.historySize);</div><div class="line">      latencyStats.put(sourceDescriptor, sourceStats);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">long</span> now = System.currentTimeMillis();</div><div class="line">   sourceStats.addValue(now - marker.getMarkedTime());  <span class="comment">//所以latency的计算时间是当前时间减去marker摄入的时间</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="number">1</span>.首先生成一个Latency的描述符，sink operator的区分不同subIndex为不同LatencySource，其他operator不区分subIndex，只按照vertexID来区分</div><div class="line"><span class="number">2</span>.然后生成对应Latency的描述符的最近<span class="string">"historySize:128"</span>个Latency的值（WindowSize controls the number of values that contribute to the reported statistics. ）</div><div class="line"><span class="number">3</span>.在这里值没有在web展示的原因是因为guage展示的不是一个数字，因而无法被展示</div></pre></td></tr></table></figure>
<p>然后只要不是sink类型的operator，就会往后继续传递LatencyMarker。随机选择一个Channel来发送,这里就是为了保证一个latencyMarker在整个流中只会出现一次。这里和watermark的机制有点不一样，waterMark是遍历全部的channel来发送。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">emitLatencyMarker</span><span class="params">(LatencyMarker latencyMarker)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span>(outputs.length &lt;= <span class="number">0</span>) &#123;</div><div class="line">      <span class="comment">// ignore</span></div><div class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span>(outputs.length == <span class="number">1</span>) &#123;</div><div class="line">      outputs[<span class="number">0</span>].emitLatencyMarker(latencyMarker);</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// randomly select an output</span></div><div class="line">      outputs[RNG.nextInt(outputs.length)].emitLatencyMarker(latencyMarker);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>LatencyMarker不会参与窗口时间的计算，应该说是不参与任何operator的计算，因此他只能用来衡量数据在整个DAG中流通的速度不能衡量operator计算的时间，这个只能通过单测来进行计算</strong><br><code>StreamInputProcessor#processInput</code>  这里进行对进入的element进行处理，对于watermark和LatencyMarker类型会先处理发送掉，不会经由后面的windowOperator或其他operator来处理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (result.isFullRecord()) &#123;</div><div class="line">   StreamElement recordOrMark = deserializationDelegate.getInstance();</div><div class="line"> </div><div class="line">   <span class="keyword">if</span> (recordOrMark.isWatermark()) &#123;</div><div class="line">      <span class="keyword">long</span> watermarkMillis = recordOrMark.asWatermark().getTimestamp();</div><div class="line">      <span class="keyword">if</span> (watermarkMillis &gt; watermarks[currentChannel]) &#123;</div><div class="line">         watermarks[currentChannel] = watermarkMillis;</div><div class="line">         <span class="keyword">long</span> newMinWatermark = Long.MAX_VALUE;</div><div class="line">         <span class="keyword">for</span> (<span class="keyword">long</span> watermark: watermarks) &#123;</div><div class="line">            newMinWatermark = Math.min(watermark, newMinWatermark);</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">if</span> (newMinWatermark &gt; lastEmittedWatermark) &#123;</div><div class="line">            lastEmittedWatermark = newMinWatermark;</div><div class="line">            <span class="keyword">synchronized</span> (lock) &#123;</div><div class="line">               streamOperator.processWatermark(<span class="keyword">new</span> Watermark(lastEmittedWatermark));</div><div class="line">            &#125;</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">continue</span>;</div><div class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span>(recordOrMark.isLatencyMarker()) &#123;</div><div class="line">      <span class="comment">// handle latency marker</span></div><div class="line">      <span class="keyword">synchronized</span> (lock) &#123;</div><div class="line">         streamOperator.processLatencyMarker(recordOrMark.asLatencyMarker());</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">continue</span>;</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// now we can do the actual processing</span></div><div class="line">      StreamRecord&lt;IN&gt; record = recordOrMark.asRecord();</div><div class="line">      <span class="keyword">synchronized</span> (lock) &#123;</div><div class="line">         numRecordsIn.inc();</div><div class="line">         streamOperator.setKeyContextElement1(record);</div><div class="line">         streamOperator.processElement(record);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>sink中只进行report不再进行forward了（StreamSink.java）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reportOrForwardLatencyMarker</span><span class="params">(LatencyMarker maker)</span> </span>&#123;</div><div class="line">   <span class="comment">// all operators are tracking latencies</span></div><div class="line">   <span class="keyword">this</span>.latencyGauge.reportLatency(maker, <span class="keyword">true</span>);</div><div class="line"> </div><div class="line">   <span class="comment">// sinks don't forward latency markers</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>总结：</p>
<ol>
<li>LatencyMarker能够较好的监控因网络抖动或数据反压引起的延迟，可以提前预警反压情况</li>
<li>在正常情况（没有反压）下数据在DAG图中的流动延迟大概0.5s左右，所以说Flink的确是一个很快的引擎：）</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于Flink中的Latency track&lt;/p&gt;
    
    </summary>
    
      <category term="Flink" scheme="yoursite.com/categories/Flink/"/>
    
    
      <category term="flink" scheme="yoursite.com/tags/flink/"/>
    
  </entry>
  
</feed>
