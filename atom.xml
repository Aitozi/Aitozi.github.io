<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aitozi</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="yoursite.com/"/>
  <updated>2017-11-24T07:45:26.000Z</updated>
  <id>yoursite.com/</id>
  
  <author>
    <name>aitozi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ArrayDeque源码分析</title>
    <link href="yoursite.com/2017/11/24/ArrayDeque%E5%AE%9E%E7%8E%B0%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>yoursite.com/2017/11/24/ArrayDeque实现源码分析/</id>
    <published>2017-11-24T07:32:23.000Z</published>
    <updated>2017-11-24T07:45:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于ArrayDeque源码分析</p>
<a id="more"></a>
<h1 id="Stack-and-Queue"><a href="#Stack-and-Queue" class="headerlink" title="Stack and Queue"></a>Stack and Queue</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Java里有一个叫做<em>Stack</em>的类，却没有叫做<em>Queue</em>的类（它是个接口名字）。当需要使用栈时，Java已不推荐使用<em>Stack</em>，而是推荐使用更高效的<em>ArrayDeque</em>；既然<em>Queue</em>只是一个接口，当需要使用队列时也就首选<em>ArrayDeque</em>了（次选是<em>LinkedList</em>）。</p>
<ul>
<li>stack 先进后出</li>
<li>queue 先进先出</li>
</ul>
<h1 id="总体介绍"><a href="#总体介绍" class="headerlink" title="总体介绍"></a>总体介绍</h1><p>要讲栈和队列，首先要讲<em>Deque</em>接口。<em>Deque</em>的含义是“double ended queue”，即双端队列，它既可以当作栈使用，也可以当作队列使用。下表列出了<em>Deque</em>与<em>Queue</em>相对应的接口：</p>
<table>
<thead>
<tr>
<th>Queue Method</th>
<th>Equivalent Deque Method</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>add(e)</code></td>
<td><code>addLast(e)</code></td>
<td>向队尾插入元素，失败则抛出异常</td>
</tr>
<tr>
<td><code>offer(e)</code></td>
<td><code>offerLast(e)</code></td>
<td>向队尾插入元素，失败则返回<code>false</code></td>
</tr>
<tr>
<td><code>remove()</code></td>
<td><code>removeFirst()</code></td>
<td>获取并删除队首元素，失败则抛出异常</td>
</tr>
<tr>
<td><code>poll()</code></td>
<td><code>pollFirst()</code></td>
<td>获取并删除队首元素，失败则返回<code>null</code></td>
</tr>
<tr>
<td><code>element()</code></td>
<td><code>getFirst()</code></td>
<td>获取但不删除队首元素，失败则抛出异常</td>
</tr>
<tr>
<td><code>peek()</code></td>
<td><code>peekFirst()</code></td>
<td>获取但不删除队首元素，失败则返回<code>null</code></td>
</tr>
</tbody>
</table>
<p>下表列出了<em>Deque</em>与<em>Stack</em>对应的接口：</p>
<table>
<thead>
<tr>
<th>Stack Method</th>
<th>Equivalent Deque Method</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>push(e)</code></td>
<td><code>addFirst(e)</code></td>
<td>向栈顶插入元素，失败则抛出异常</td>
</tr>
<tr>
<td>无</td>
<td><code>offerFirst(e)</code></td>
<td>向栈顶插入元素，失败则返回<code>false</code></td>
</tr>
<tr>
<td><code>pop()</code></td>
<td><code>removeFirst()</code></td>
<td>获取并删除栈顶元素，失败则抛出异常</td>
</tr>
<tr>
<td>无</td>
<td><code>pollFirst()</code></td>
<td>获取并删除栈顶元素，失败则返回<code>null</code></td>
</tr>
<tr>
<td><code>peek()</code></td>
<td><code>peekFirst()</code></td>
<td>获取但不删除栈顶元素，失败则抛出异常</td>
</tr>
<tr>
<td>无</td>
<td><code>peekFirst()</code></td>
<td>获取但不删除栈顶元素，失败则返回<code>null</code></td>
</tr>
</tbody>
</table>
<p>上面两个表共定义了<em>Deque</em>的12个接口。添加，删除，取值都有两套接口，它们功能相同，区别是对失败情况的处理不同。<strong>一套接口遇到失败就会抛出异常，另一套遇到失败会返回特殊值（<code>false</code>或<code>null</code>）</strong>。除非某种实现对容量有限制，大多数情况下，添加操作是不会失败的。<strong>虽然<em>Deque</em>的接口有12个之多，但无非就是对容器的两端进行操作，或添加，或删除，或查看</strong>。明白了这一点讲解起来就会非常简单。</p>
<p><em>ArrayDeque</em>和<em>LinkedList</em>是<em>Deque</em>的两个通用实现，由于官方更推荐使用<em>AarryDeque</em>用作栈和队列，因为他更高效。<em>ArrayDeque的高效来源于head和tail这两个变量，它们使得物理上简单的从头到尾的数组变为了一个逻辑上循环的数组，避免了在头尾操作时的移</em></p>
<p>从名字可以看出<em>ArrayDeque</em>底层通过数组实现，为了满足可以同时在数组两端插入或删除元素的需求，该数组还必须是循环的，即<strong>循环数组（circular array）</strong>，也就是说数组的任何一点都可能被看作起点或者终点。<em>ArrayDeque</em>是非线程安全的（not thread-safe），当多个线程同时使用的时候，需要程序员手动同步；另外，该容器不允许放入<code>null</code>元素。</p>
<p><img src="http://or0igopk2.bkt.clouddn.com/17-11-24/2573607.jpg" alt=""></p>
<p>上图中我们看到，<strong><code>head</code>指向首端第一个有效元素，<code>tail</code>指向尾端第一个可以插入元素的空位</strong>。因为是循环数组，所以<code>head</code>不一定总等于0，<code>tail</code>也不一定总是比<code>head</code>大。</p>
<h1 id="方法剖析"><a href="#方法剖析" class="headerlink" title="方法剖析"></a>方法剖析</h1><h2 id="两个重要索引"><a href="#两个重要索引" class="headerlink" title="两个重要索引"></a>两个重要索引</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一个元素的索引  </span></div><div class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> head;  </div><div class="line"><span class="comment">// 下个要添加元素的位置，为末尾元素的索引 + 1  </span></div><div class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> tail;</div></pre></td></tr></table></figure>
<ul>
<li>如果head和tail相同，则数组为空，长度为0。</li>
<li>如果tail大于head，则第一个元素为elements[head]，最后一个为elements[tail-1]，长度为tail-head，元素索引从head到tail-1。</li>
<li>如果tail小于head，且为0，则第一个元素为elements[head]，最后一个为elements[elements.length-1]，元素索引从head到elements.length-1。</li>
<li>如果tail小于head，且大于0，则会形成循环，第一个元素为elements[head]，最后一个是elements[tail-1]，元素索引从head到elements.length-1，然后再从0到tail-1</li>
</ul>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayDeque</span><span class="params">()</span> </span>&#123;  </div><div class="line">    elements = (E[]) <span class="keyword">new</span> Object[<span class="number">16</span>]; <span class="comment">// 默认的数组长度大小  </span></div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayDeque</span><span class="params">(<span class="keyword">int</span> numElements)</span> </span>&#123;  </div><div class="line">    allocateElements(numElements); <span class="comment">// 需要的数组长度大小  </span></div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayDeque</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;  </div><div class="line">    allocateElements(c.size()); <span class="comment">// 根据集合来分配数组大小  </span></div><div class="line">    addAll(c); <span class="comment">// 把集合中元素放到数组中  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里看出要么是创建默认的16大小的数组，要么是<code>allocateElements(size)</code>去进行动态调整。</p>
<h2 id="分配的逻辑"><a href="#分配的逻辑" class="headerlink" title="分配的逻辑"></a>分配的逻辑</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">allocateElements</span><span class="params">(<span class="keyword">int</span> numElements)</span> </span>&#123;  </div><div class="line">    <span class="keyword">int</span> initialCapacity = MIN_INITIAL_CAPACITY;  </div><div class="line">    <span class="comment">// 找到大于需要长度的最小的2的幂整数。  </span></div><div class="line">    <span class="comment">// Tests "&lt;=" because arrays aren't kept full.  </span></div><div class="line">    <span class="keyword">if</span> (numElements &gt;= initialCapacity) &#123;  </div><div class="line">        initialCapacity = numElements;  </div><div class="line">        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">1</span>);  </div><div class="line">        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">2</span>);  </div><div class="line">        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">4</span>);  </div><div class="line">        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">8</span>);  </div><div class="line">        initialCapacity |= (initialCapacity &gt;&gt;&gt; <span class="number">16</span>);  </div><div class="line">        initialCapacity++;  </div><div class="line">  </div><div class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)   <span class="comment">// Too many elements, must back off  </span></div><div class="line">            initialCapacity &gt;&gt;&gt;= <span class="number">1</span>;<span class="comment">// Good luck allocating 2 ^ 30 elements  </span></div><div class="line">    &#125;  </div><div class="line">    elements = (E[]) <span class="keyword">new</span> Object[initialCapacity];  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码的晦涩之处在于：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">1</span>);</div><div class="line">initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">2</span>);</div><div class="line">initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">4</span>);</div><div class="line">initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">8</span>);</div><div class="line">initialCapacity |= (initialCapacity &gt;&gt;&gt; <span class="number">16</span>);</div><div class="line"></div><div class="line">initialCapacity++;</div></pre></td></tr></table></figure>
<ul>
<li>如果numElements小于MIN_INITIAL_CAPACITY，则分配的数组长度就是MIN_INITIAL_CAPACITY，它是一个静态常量，值为8。</li>
<li>在numElements大于等于8的情况下，分配的实际长度是严格大于numElements并且为2的整数次幂的最小数。比如，如果numElements为10，则实际分配16，如果numElements为32，则为64。</li>
</ul>
<p>为什么要为2的幂次数呢？我们待会会看到，这样会使得很多操作的效率很高。</p>
<p>为什么要严格大于numElements呢？因为循环数组必须时刻至少留一个空位，tail变量指向下一个空位，为了容纳numElements个元素，至少需要numElements+1个位置</p>
<p>这究竟在干什么？其实，它是在将initialCapacity左边最高位的1复制到右边的每一位，这种复制类似于病毒复制，是1传2、2传4、4传8式的指数级复制，最后再执行initialCapacity++就可以得到比initialCapacity大且为2的幂次方的最小的数。  这个操作可以在<code>Hackers Delight</code>这本书中找到原型：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">highestOneBit</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    <span class="comment">// HD, Figure 3-1</span></div><div class="line">    i |= (i &gt;&gt;  <span class="number">1</span>);</div><div class="line">    i |= (i &gt;&gt;  <span class="number">2</span>);</div><div class="line">    i |= (i &gt;&gt;  <span class="number">4</span>);</div><div class="line">    i |= (i &gt;&gt;  <span class="number">8</span>);</div><div class="line">    i |= (i &gt;&gt; <span class="number">16</span>);</div><div class="line">    <span class="keyword">return</span> i - (i &gt;&gt;&gt; <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="addFirst"><a href="#addFirst" class="headerlink" title="addFirst()"></a>addFirst()</h2><p><code>addFirst(E e)</code>的作用是在<em>Deque</em>的首端插入元素，也就是在<code>head</code>的前面插入元素，在空间足够且下标没有越界的情况下，只需要将<code>elements[--head] = e</code>即可。</p>
<p><img src="http://or0igopk2.bkt.clouddn.com/17-11-24/76601566.jpg" alt=""></p>
<p>实际需要考虑：</p>
<ol>
<li>空间是否够用</li>
<li>下标是否越界的问题。上图中，如果<code>head</code>为<code>0</code>之后接着调用<code>addFirst()</code>，虽然空余空间还够用，但<code>head</code>为<code>-1</code>，下标越界了。下列代码很好的解决了这两个问题。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//addFirst(E e)</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (e == <span class="keyword">null</span>)<span class="comment">//不允许放入null</span></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">    elements[head = (head - <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>)] = e;<span class="comment">//2.下标是否越界</span></div><div class="line">    <span class="keyword">if</span> (head == tail)<span class="comment">//1.空间是否够用</span></div><div class="line">        doubleCapacity();<span class="comment">//扩容</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码我们看到，<strong>空间问题是在插入之后解决的</strong>，因为<code>tail</code>总是指向下一个可插入的空位，也就意味着<code>elements</code>数组至少有一个空位，所以插入元素的时候不用考虑空间问题。</p>
<p>下标越界的处理解决起来非常简单，<code>head = (head - 1) &amp; (elements.length - 1)</code>就可以了，<strong>这段代码相当于取余，同时解决了<code>head</code>为负值的情况</strong>。由上述分配空间的代码可以看出<code>elements.length</code>必是<code>2</code>的指数倍，<code>elements.length - 1</code>就是二进制低位全<code>1</code>，无论是正数还是负数，跟<code>head - 1</code>相与之后就起到了取模的作用，如果<code>head - 1</code>为负数（其实只可能是-1），则相当于对其取相对于<code>elements.length</code>的补码。</p>
<p>比如说，如果elements.length为8，则(elements.length - 1)为7，二进制为0111，对于负数-1，与7相与，结果为7，对于正数8，与7相与，结果为0，都能达到循环数组中找下一个正确位置的目的。</p>
<p>下面再说说扩容函数<code>doubleCapacity()</code>，其逻辑是申请一个更大的数组（原数组的两倍），然后将原数组复制过去。过程如下图所示：</p>
<p><img src="http://or0igopk2.bkt.clouddn.com/17-11-24/65385427.jpg" alt=""></p>
<p>图中我们看到，复制分两次进行，第一次复制<code>head</code>右边的元素，第二次复制<code>head</code>左边的元素。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//doubleCapacity()</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doubleCapacity</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">assert</span> head == tail;</div><div class="line">    <span class="keyword">int</span> p = head;</div><div class="line">    <span class="keyword">int</span> n = elements.length;</div><div class="line">    <span class="keyword">int</span> r = n - p; <span class="comment">// head右边元素的个数</span></div><div class="line">    <span class="keyword">int</span> newCapacity = n &lt;&lt; <span class="number">1</span>;<span class="comment">//原空间的2倍</span></div><div class="line">    <span class="keyword">if</span> (newCapacity &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Sorry, deque too big"</span>);</div><div class="line">    Object[] a = <span class="keyword">new</span> Object[newCapacity];</div><div class="line">    System.arraycopy(elements, p, a, <span class="number">0</span>, r);<span class="comment">//复制右半部分，对应上图中绿色部分</span></div><div class="line">    System.arraycopy(elements, <span class="number">0</span>, a, r, p);<span class="comment">//复制左半部分，对应上图中灰色部分</span></div><div class="line">    elements = (E[])a;</div><div class="line">    head = <span class="number">0</span>;</div><div class="line">    tail = n;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="pollFirst"><a href="#pollFirst" class="headerlink" title="pollFirst()"></a>pollFirst()</h2><p><code>pollFirst()</code>的作用是删除并返回<em>Deque</em>首端元素，也即是<code>head</code>位置处的元素。如果容器不空，只需要直接返回<code>elements[head]</code>即可，当然还需要处理下标的问题。由于<code>ArrayDeque</code>中不允许放入<code>null</code>，当<code>elements[head] == null</code>时，意味着容器为空。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pollFirst</span><span class="params">()</span> </span>&#123;</div><div class="line">    E result = elements[head];</div><div class="line">    <span class="keyword">if</span> (result == <span class="keyword">null</span>)<span class="comment">//null值意味着deque为空</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    elements[h] = <span class="keyword">null</span>;<span class="comment">//let GC work</span></div><div class="line">    head = (head + <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>);<span class="comment">//下标越界处理</span></div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="pollLast"><a href="#pollLast" class="headerlink" title="pollLast()"></a>pollLast()</h2><p><code>pollLast()</code>的作用是删除并返回<em>Deque</em>尾端元素，也即是<code>tail</code>位置前面的那个元素。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pollLast</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> t = (tail - <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>);<span class="comment">//tail的上一个位置是最后一个元素</span></div><div class="line">    E result = elements[t];</div><div class="line">    <span class="keyword">if</span> (result == <span class="keyword">null</span>)<span class="comment">//null值意味着deque为空</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    elements[t] = <span class="keyword">null</span>;<span class="comment">//let GC work</span></div><div class="line">    tail = t;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="peekFirst"><a href="#peekFirst" class="headerlink" title="peekFirst()"></a>peekFirst()</h2><p><code>peekFirst()</code>的作用是返回但不删除<em>Deque</em>首端元素，也即是<code>head</code>位置处的元素，直接返回<code>elements[head]</code>即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">peekFirst</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> elements[head]; <span class="comment">// elements[head] is null if deque empty</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="peekLast"><a href="#peekLast" class="headerlink" title="peekLast()"></a>peekLast()</h2><p><code>peekLast()</code>的作用是返回但不删除<em>Deque</em>尾端元素，也即是<code>tail</code>位置前面的那个元素。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">peekLast</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> elements[(tail - <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>)];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/CarpenterLee/JCFInternals/tree/master/markdown" target="_blank" rel="external">https://github.com/CarpenterLee/JCFInternals/tree/master/markdown</a></p>
<p><a href="http://czj4451.iteye.com/blog/1688693" target="_blank" rel="external">http://czj4451.iteye.com/blog/1688693</a></p>
<p><a href="https://www.cnblogs.com/swiftma/p/6029547.html" target="_blank" rel="external">https://www.cnblogs.com/swiftma/p/6029547.html</a></p>
<p><a href="https://stackoverflow.com/questions/28314798/addfirst-method-of-arraydeque-class" target="_blank" rel="external">https://stackoverflow.com/questions/28314798/addfirst-method-of-arraydeque-class</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于ArrayDeque源码分析&lt;/p&gt;
    
    </summary>
    
      <category term="源码分析" scheme="yoursite.com/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="jdk" scheme="yoursite.com/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>flink-watermark</title>
    <link href="yoursite.com/2017/09/10/flink-watermark/"/>
    <id>yoursite.com/2017/09/10/flink-watermark/</id>
    <published>2017-09-10T07:59:23.000Z</published>
    <updated>2017-09-10T08:13:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于Flink中watermark工作原理代码分析</p>
<a id="more"></a>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>waterMark，latency，checkpoint这三者实现方式都是上游节点逐步广播消息给下游节点来处理的行为（都是在流中插入一种特殊的数据结构来做处理）</p>
<h3 id="时间语义"><a href="#时间语义" class="headerlink" title="时间语义"></a>时间语义</h3><p>谈及watermark就要先从Flink支持的时间语义说起，Flink支持三种时间语义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">process time:指的系统处理对应数据时的系统时间。他是最简单的一种实现，由于不需要额外的协调，因性能最好</div><div class="line">event time:是指数据中携带的时间，而不是数据到达的时间。因此时间的进度完全取决于数据，而不是系统时间。使用event time必须指定生成eventTime和watermark的方式。因为他一般会等待迟到的数据，因此一定会有一定的延时</div><div class="line">ingestion time:是指数据进入flink的时间，在source处插入的时间，和process time一样无法处乱序事件</div></pre></td></tr></table></figure>
<p>对于eventtime和ingestion time两种语义到达的数据有可能乱序的。从事件产生（例如日志采集数据中的乱序日志），到流经source，再到operator，中间是有一个过程时间的。虽然大部分情况下，流到operator的数据都是按照事件产生的时间顺序来的，但是也不排除由于网络、背压等原因，导致乱序的产生（out-of-order或者说late element）。<br>但是对于late element，我们又不能无限期的等下去，必须要有个机制来保证一个特定的时间后，必须触发window去进行计算了。这个特别的机制，就是watermark，它告诉了算子时间不大于 WaterMark 的消息不应该再被接收【如果出现意味着延迟到达】。也就是说水位线以下的数据均已经到达。WaterMark 从源算子开始 emit，并逐级向下游算子传递。当源算子关闭时，会发射一个携带 Long.MAX_VALUE 值时间戳的 WaterMark，下游算子接收到之后便知道不会再有消息到达。</p>
<h3 id="waterMark产生方式"><a href="#waterMark产生方式" class="headerlink" title="waterMark产生方式"></a>waterMark产生方式</h3><p>waterMark的产生:有两种方式来产生watermark和timestamp</p>
<ol>
<li>在数据源处直接进行assign timestamp 和generate watermark</li>
<li>通过timestamp和watermark generate operator来产生，如果使用了timestamp assigner和watermark generator在source处产生的timestamp和watermark会被覆盖。</li>
<li>其实这两种最终的实现方式还是一样的！即第一种也是在source处分配了timestampAssigner</li>
</ol>
<h4 id="方法一-在数据源处产生发送"><a href="#方法一-在数据源处产生发送" class="headerlink" title="方法一 在数据源处产生发送"></a>方法一 在数据源处产生发送</h4><p>目前实现了在source提取时间和产生operator的只有0.10版本的kafka fetcher中实现<br>首先根据应用<code>StreamExecutionEnvironment#setStreamTimeCharacteristic</code>设置的时间语义（存储于<code>StreamConfig</code>类）来获取<br>对应的sourceContext，sourceContext接口是sourceFunction发送数据的抽象，有三个实现类，根据时间语义划分</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> (timeCharacteristic) &#123;</div><div class="line">            <span class="keyword">case</span> EventTime:</div><div class="line">                ctx = <span class="keyword">new</span> ManualWatermarkContext&lt;&gt;(checkpointLock, output);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> IngestionTime:</div><div class="line">                ctx = <span class="keyword">new</span> AutomaticWatermarkContext&lt;&gt;(processingTimeService, checkpointLock, output, watermarkInterval);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> ProcessingTime:</div><div class="line">                ctx = <span class="keyword">new</span> NonTimestampContext&lt;&gt;(checkpointLock, output);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.valueOf(timeCharacteristic));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ctx;</div></pre></td></tr></table></figure>
<p>这里我们就考虑eventTime的情况。<br>在kafka AbstractFetcher中还提供了三种模式来控制自己生产时间戳和watermark</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NO_TIMESTAMPS_WATERMARKS: fetcher 不生产 timestamp 和 watermarks</div><div class="line">PERIODIC_WATERMARKS: fetcher 阶段性定时生产 watermarks</div><div class="line">PUNCTUATED_WATERMARKS: fetcher 生产标记 watermark 【按照特定的消息字段值触发】</div></pre></td></tr></table></figure>
<p>这里的区分方式来自于<code>FlinkKafkaConsumerBase#assignTimestampsAndWatermarks</code>分配的<code>AssignerWithPunctuatedWatermarks</code>或<code>AssignerWithPeriodicWatermarks</code> 也就是assigner决定了产生方式，这其实就是把方法二给封装到了KafkaConsumerBase里面！当然这个也需要用户在创建consumer之后自定义一个assigner。</p>
<h4 id="方法二-使用TimestampAssigner来实现"><a href="#方法二-使用TimestampAssigner来实现" class="headerlink" title="方法二 使用TimestampAssigner来实现"></a>方法二 使用TimestampAssigner来实现</h4><p>TimestampAssinger是接收一个流，并产生一个新的流带上了时间戳和watermark，如果原来的流已经带有了timestamp和watermark那么这个将会被覆盖。timestamp assinger只需要在关于时间的操作之前加上即可。</p>
<p>flink通过接口<code>TimestampAssigner</code>来让用户依据消息的格式自己抽取可能被用于 WaterMark的timestamp，它只定义了一个接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(T element, <span class="keyword">long</span> previousElementTimestamp)</span></span>;</div></pre></td></tr></table></figure>
<p>previousElementTimestamp这个参数传入的是什么呢？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="keyword">long</span> newTimestamp = userFunction.extractTimestamp(value, </div><div class="line">				element.hasTimestamp() ? element.getTimestamp() : Long.MIN_VALUE);</div><div class="line">因此如果一个元素如果已经带有timestamp，比如在source处已经分配，那么在这里处理的时候会被覆盖掉。</div></pre></td></tr></table></figure>
<p>而<code>TimestampAssigner</code>的两个继承接口<code>AssignerWithPunctuatedWatermarks</code>以及 <code>AssignerWithPeriodicWatermarks</code> 定义了waterMark生成的两种典型方式。</p>
<h5 id="AssignerWithPeriodicWatermarks"><a href="#AssignerWithPeriodicWatermarks" class="headerlink" title="AssignerWithPeriodicWatermarks"></a>AssignerWithPeriodicWatermarks</h5><p><code>AssignerWithPeriodicWatermarks</code>是周期性的产生watermark，每过一定间隔   <code>ExecutionConfig#getAutoWatermarkInterval()</code>，系统会调用<code>getCurrentWatermark</code>来获取最新的waterMark值，如果新的waterMark值有增长那么就会发送一个新的waterMark，如果没有新的元素进来，那么getCurrentWatermark则不会被周期性的调用，这个接口的好处是，可以定义最大乱序时间，减少因为数据延迟到达而被时间窗口丢弃的行为，实现类<code>BoundedOutOfOrdernessTimestampExtractor</code></p>
<h5 id="AssignerWithPunctuatedWatermarks"><a href="#AssignerWithPunctuatedWatermarks" class="headerlink" title="AssignerWithPunctuatedWatermarks"></a>AssignerWithPunctuatedWatermarks</h5><p><code>AssignerWithPunctuatedWatermarks</code>的使用场景是针对在接收到特定的elements之后才触发更新waterMark的操作。比如有一个流中有一些元素带有flag表示没有晚于这个元素时间的元素了,那么他的实现代码是这样的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WatermarkOnFlagAssigner</span> <span class="keyword">implements</span> <span class="title">AssignerWithPunctuatedWatermarks</span>&lt;<span class="title">MyElement</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(MyElement element, <span class="keyword">long</span> previousElementTimestamp)</span> </span>&#123;</div><div class="line">         <span class="keyword">return</span> element.getSequenceTimestamp();</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">public</span> Watermark <span class="title">checkAndGetNextWatermark</span><span class="params">(MyElement lastElement, <span class="keyword">long</span> extractedTimestamp)</span> </span>&#123;</div><div class="line">         <span class="keyword">return</span> lastElement.isEndOfSequence() ? <span class="keyword">new</span> Watermark(extractedTimestamp) : <span class="keyword">null</span>;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><p>我们平常用的最多的还是<code>AssignerWithPeriodicWatermarks</code> 并设置数据到达最大超时时长。下面的分析我们就以<code>AssignerWithPeriodicWatermarks</code>为例。<br>想到一个点<code>AssignerWithPunctuatedWatermarks</code>的一个使用场景:可能比较适合于数据不是连续发送或者说是批任务的场景，比如说是每天某时候数据有更新之后才有计算，那么只要在进入的最后一个数据打入endFlag，然后进行waterMark更新触发数据处理（一个想法，尚未实践）。</p>
<h3 id="waterMark在传输及对window-Operator的作用方式"><a href="#waterMark在传输及对window-Operator的作用方式" class="headerlink" title="waterMark在传输及对window Operator的作用方式"></a>waterMark在传输及对window Operator的作用方式</h3><h4 id="TimestampsAndPeriodicWatermarksOperator"><a href="#TimestampsAndPeriodicWatermarksOperator" class="headerlink" title="TimestampsAndPeriodicWatermarksOperator"></a>TimestampsAndPeriodicWatermarksOperator</h4><p>在DataStream调用<code>assignTimestampsAndWatermarks</code>产生了一个<code>TimestampsAndPeriodicWatermarksOperator</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line"><span class="function"><span class="keyword">public</span> SingleOutputStreamOperator&lt;T&gt; <span class="title">assignTimestampsAndWatermarks</span><span class="params">(</span></span></div><div class="line">	AssignerWithPeriodicWatermarks&lt;T&gt; timestampAndWatermarkAssigner) &#123;</div><div class="line">		</div><div class="line">	<span class="comment">// match parallelism to input, otherwise dop=1 sources could lead to some strange</span></div><div class="line">	<span class="comment">// behaviour: the watermark will creep along very slowly because the elements</span></div><div class="line">	<span class="comment">// from the source go to each extraction operator round robin.</span></div><div class="line">	<span class="comment">//这里就是说一般会默认将并发度设成和inputOperator的并发度一致，避免因为elements进入extraction operator的时候要随机进入分区。</span></div><div class="line">	<span class="keyword">final</span> <span class="keyword">int</span> inputParallelism = getTransformation().getParallelism();</div><div class="line">	<span class="keyword">final</span> AssignerWithPeriodicWatermarks&lt;T&gt; cleanedAssigner = clean(timestampAndWatermarkAssigner);</div><div class="line">		</div><div class="line">	TimestampsAndPeriodicWatermarksOperator&lt;T&gt; operator = </div><div class="line">			<span class="keyword">new</span> TimestampsAndPeriodicWatermarksOperator&lt;&gt;(cleanedAssigner);</div><div class="line">		</div><div class="line">	<span class="keyword">return</span> transform(<span class="string">"Timestamps/Watermarks"</span>, getTransformation().getOutputType(), operator)</div><div class="line">			.setParallelism(inputParallelism);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们看这个<code>TimestampsAndPeriodicWatermarksOperator</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	<span class="keyword">super</span>.open();</div><div class="line"></div><div class="line">	currentWatermark = Long.MIN_VALUE;</div><div class="line">	watermarkInterval = getExecutionConfig().getAutoWatermarkInterval();</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (watermarkInterval &gt; <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">long</span> now = getProcessingTimeService().getCurrentProcessingTime();</div><div class="line">		getProcessingTimeService().registerTimer(now + watermarkInterval, <span class="keyword">this</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProcessingTime</span><span class="params">(<span class="keyword">long</span> timestamp)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	<span class="comment">// register next timer</span></div><div class="line">	Watermark newWatermark = userFunction.getCurrentWatermark();</div><div class="line">	<span class="keyword">if</span> (newWatermark != <span class="keyword">null</span> &amp;&amp; newWatermark.getTimestamp() &gt; currentWatermark) &#123;</div><div class="line">		currentWatermark = newWatermark.getTimestamp();</div><div class="line">		<span class="comment">// emit watermark</span></div><div class="line">		output.emitWatermark(newWatermark);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">long</span> now = getProcessingTimeService().getCurrentProcessingTime();</div><div class="line">	getProcessingTimeService().registerTimer(now + watermarkInterval, <span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过这两个方法，会从TimestampsAndPeriodicWatermarksOperator定期<code>watermarkInterval</code>发送<code>userFunction.getCurrentWatermark()</code>用户定义的waterMark,当然也是要waterMark有上涨的情况下才会发送</p>
<p>而且这里有个有意思的地方,这里也定义了<code>processWatermark</code>方法，该方法主要调用时机主要，是在<code>StreamInputProcessor#processInput</code>中,这个类在后面再具体分析</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processWatermark</span><span class="params">(Watermark mark)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	<span class="comment">// if we receive a Long.MAX_VALUE watermark we forward it since it is used</span></div><div class="line">	<span class="comment">// to signal the end of input and to not block watermark progress downstream</span></div><div class="line">	<span class="keyword">if</span> (mark.getTimestamp() == Long.MAX_VALUE &amp;&amp; currentWatermark != Long.MAX_VALUE) &#123;</div><div class="line">		currentWatermark = Long.MAX_VALUE;</div><div class="line">		output.emitWatermark(mark);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是这里覆盖了<code>AbstractStreamOperator</code>中的写法是为什么呢?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processWatermark</span><span class="params">(Watermark mark)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	<span class="keyword">for</span> (HeapInternalTimerService&lt;?, ?&gt; service : timerServices.values()) &#123;</div><div class="line">		service.advanceWatermark(mark.getTimestamp());</div><div class="line">	&#125;</div><div class="line">	output.emitWatermark(mark);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里其实体现了在最后一个<code>TimestampsAndPeriodicWatermarksOperator</code>之前定义的waterMark传递此operator的时候除非是一个流结束标志<code>Long.MAX_VALUE</code>,否则不会发送，只会有该operator定时发送waterMark给下游处理，这也就说明了在source处定义的waterMark会被后面定义的给覆盖。</p>
<p>所以大部分Operator处理waterMark的方式是<code>AbstractStreamOperator</code>中定义好的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processWatermark</span><span class="params">(Watermark mark)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	<span class="keyword">for</span> (HeapInternalTimerService&lt;?, ?&gt; service : timerServices.values()) &#123;</div><div class="line">		service.advanceWatermark(mark.getTimestamp());<span class="comment">//这个处理逻辑还要在看下</span></div><div class="line">	&#125;</div><div class="line">	output.emitWatermark(mark);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里看到他是会给所有的下游channel发送一个watermark</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">emitWatermark</span><span class="params">(Watermark mark)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (Output&lt;StreamRecord&lt;OUT&gt;&gt; out : allOutputs) &#123;</div><div class="line">		out.emitWatermark(mark);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="StreamInputProcessor"><a href="#StreamInputProcessor" class="headerlink" title="StreamInputProcessor"></a>StreamInputProcessor</h4><p>processWatermark是在<code>StreamInputprocessor</code>中调用的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (recordOrMark.isWatermark()) &#123;</div><div class="line">		<span class="keyword">long</span> watermarkMillis = recordOrMark.asWatermark().getTimestamp();</div><div class="line">		<span class="keyword">if</span> (watermarkMillis &gt; watermarks[currentChannel]) &#123;</div><div class="line">			watermarks[currentChannel] = watermarkMillis;</div><div class="line">			<span class="keyword">long</span> newMinWatermark = Long.MAX_VALUE;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">long</span> watermark: watermarks) &#123;</div><div class="line">				newMinWatermark = Math.min(watermark, newMinWatermark);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (newMinWatermark &gt; lastEmittedWatermark) &#123;</div><div class="line">				lastEmittedWatermark = newMinWatermark;</div><div class="line">				<span class="keyword">synchronized</span> (lock) &#123;</div><div class="line">					streamOperator.processWatermark(<span class="keyword">new</span> Watermark(lastEmittedWatermark));</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">continue</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>逻辑总结:（channel的理解还不够）</p>
<ol>
<li>如果消费到的消息是一个 WaterMark，获得其对应的 source channel id 并将时间更新进去，同时记录下当前所有 channel 的最小 WaterMark 时间</li>
<li>如果当前最小 WaterMark 时间【所有的 channel 都至少消费到该时间】大于上次发射给下游的 WaterMark 时间，则更新 WaterMark 时间并将其交给算子处理</li>
<li>通常算子在处理【尤其是涉及了窗口计算或者需要时间缓存策略的算子】后会将 WaterMark 继续往下游广播发送</li>
</ol>
<h3 id="waterMark对window作用形式"><a href="#waterMark对window作用形式" class="headerlink" title="waterMark对window作用形式"></a>waterMark对window作用形式</h3><p>waterMark如何触发窗口计算</p>
<h4 id="情况一-late-element"><a href="#情况一-late-element" class="headerlink" title="情况一: late element"></a>情况一: late element</h4><ul>
<li>Event Time &lt; watermark时间（对于late element太多的数据而言）,这种情况下只要来一条数据就会触发窗口计算，其他属于该窗口的数据到达后都会被丢弃。</li>
</ul>
<h4 id="情况二：乱序"><a href="#情况二：乱序" class="headerlink" title="情况二：乱序"></a>情况二：乱序</h4><ul>
<li>watermark时间 &gt;= window_end_time（对于out-of-order以及正常的数据而言）</li>
<li>在[window_start_time,window_end_time)中有数据存在</li>
</ul>
<p>window的触发机制，是先按照自然时间将window划分，如果window大小是3秒，那么1分钟内会把window划分为如下的形式:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[00:00:00,00:00:03)</div><div class="line">[00:00:03,00:00:06)</div><div class="line">...</div><div class="line">[00:00:57,00:01:00)</div></pre></td></tr></table></figure>
<p>如果window大小是10秒，则window会被分为如下的形式：当然还有一个offset值可以控制window的起始值不是整点。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[00:00:00,00:00:10)</div><div class="line">[00:00:10,00:00:20)</div><div class="line">...</div><div class="line">[00:00:50,00:01:00)</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> TriggerResult <span class="title">onElement</span><span class="params">(Object element, <span class="keyword">long</span> timestamp, TimeWindow window, TriggerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	<span class="keyword">if</span> (window.maxTimestamp() &lt;= ctx.getCurrentWatermark()) &#123;</div><div class="line">		<span class="comment">// if the watermark is already past the window fire immediately</span></div><div class="line">		<span class="keyword">return</span> TriggerResult.FIRE;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		ctx.registerEventTimeTimer(window.maxTimestamp());</div><div class="line">		<span class="keyword">return</span> TriggerResult.CONTINUE;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以看到<code>EventTimeTrigger</code>中当<code>ctx.getCurrentWatermark &gt; window.maxTimestamp</code>时立刻触发窗口计算.</p>
<p>当然没有内容是不会触发计算的:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (triggerResult.isFire()) &#123;</div><div class="line">					ACC contents = windowState.get();</div><div class="line">					<span class="keyword">if</span> (contents == <span class="keyword">null</span>) &#123;</div><div class="line">						<span class="keyword">continue</span>;</div><div class="line">					&#125;</div><div class="line">					emitWindowContents(actualWindow, contents);</div><div class="line">				&#125;</div></pre></td></tr></table></figure>
<p>输入的数据中，根据自身的Event Time，将数据划分到不同的window中，如果window中有数据，则当watermark时间&gt;=window_edn_time时，就符合了window触发的条件了，最终决定window触发，还是由数据本身的Event Time所属的window中的window_end_time决定。</p>
<p>以上代码和情况二相符，其实情况一也是情况二的特殊情况，watermark &gt; 数据的 eventtime也就是说超过了最大的延迟时间，此时其实也是来了之后watermark &gt; window.endtime，然后必然会被触发只是其他该窗格的数据会被丢弃罢了。</p>
<p>数据清理的逻辑</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isLate</span><span class="params">(W window)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> (windowAssigner.isEventTime() &amp;&amp; (cleanupTime(window) &lt;= internalTimerService.currentWatermark()));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">cleanupTime</span><span class="params">(W window)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (windowAssigner.isEventTime()) &#123;</div><div class="line">			<span class="keyword">long</span> cleanupTime = window.maxTimestamp() + allowedLateness;</div><div class="line">			<span class="keyword">return</span> cleanupTime &gt;= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> window.maxTimestamp();</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>最大乱序时间要结合自己的业务以及数据情况去设置。如果maxOutOfOrderness设置的太小，而自身数据发送时由于网络等原因导致乱序或者late太多，那么最终的结果就是会有很多单条的数据在window中被触发，数据的正确性影响太大，对此可以通过在windowOperator处添加metrics监控来指导业务方设置成什么样的一个值才是最合理的。</p>
<h4 id="allowLatency"><a href="#allowLatency" class="headerlink" title="allowLatency"></a>allowLatency</h4><p>最后一点上文代码里提到的这个allowLatency又有什么作用呢?</p>
<p>默认情况下当watermark涨过了window的endtime之后，再有属于该窗口的数据到来的时候该数据会被丢弃，设置了allowLatency这个值之后，也就是定义了数据在watermark涨过window.endtime但是又在allowlatency之前到达的话仍旧会被加到对应的窗口去。会使得窗口<strong>再次</strong>被触发。Flink会保存窗口的状态直到allow latenness 超期。</p>
<p>待补充：</p>
<ol>
<li>对流传输过程中channel的理解</li>
<li>keyby操作过程对watermark的影响 </li>
<li>advanceWatermark操作理解</li>
</ol>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://blog.csdn.net/lmalds/article/details/52704170" target="_blank" rel="external">http://blog.csdn.net/lmalds/article/details/52704170</a><br><a href="http://chenyuzhao.me/2017/02/09/flink-watermark-checkpoint/" target="_blank" rel="external">http://chenyuzhao.me/2017/02/09/flink-watermark-checkpoint/</a><br><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.2/dev/event_timestamps_watermarks.html" target="_blank" rel="external">https://ci.apache.org/projects/flink/flink-docs-release-1.2/dev/event_timestamps_watermarks.html</a><br><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.2/dev/windows.html#allowed-lateness" target="_blank" rel="external">https://ci.apache.org/projects/flink/flink-docs-release-1.2/dev/windows.html#allowed-lateness</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于Flink中watermark工作原理代码分析&lt;/p&gt;
    
    </summary>
    
      <category term="源码分析" scheme="yoursite.com/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Flink" scheme="yoursite.com/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>flink-latency-tracker</title>
    <link href="yoursite.com/2017/09/09/flink-latency-tracker/"/>
    <id>yoursite.com/2017/09/09/flink-latency-tracker/</id>
    <published>2017-09-08T16:47:35.000Z</published>
    <updated>2017-09-10T08:03:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于Flink中的Latency track</p>
<a id="more"></a>
<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>为了监控Flink数据端到端的数据延迟</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol>
<li>定时在source处定时的发送一个特殊的event，类似于watermark的处理方式，这里叫做LatencyMark。</li>
<li>latencyMarker仅在source处产生,latencyMarker对象包含的是source operator的区分标志 subIndex以及vertexID（根据subIndex以及vertexID区分是否是同一个Marker）以及携带了发送的时间</li>
<li>LatencyMark在各个operator间传递，在每个operator处将会比较LatencyMark和它当前的系统时间来决定延迟的大小，并存入LatencyGauge，每一个operator都会维护这样一个Metric（因此LatencyMark的实现就是基于TM和JM集群的机器系统时间是进行过同步的）</li>
<li>当Operator有多个Output的时候，他会随机选择一个来发送，这确保了每一个Marker在整个流中只会出现一次，repartition也不会导致LatencyMark的数量暴增。<br>在sink operator处会维护source的最近128个latencyMarker，通过一个LatencyGauge来展示</li>
</ol>
<h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>默认latencyTrackingInterval是2000，也就是2s发送一个LatencyMarker。在StreamSource中判断，如果开启了latency track.那么就会定期发送LatencyMarker。</p>
<p>在StreamSource（Operator）中的定时发送</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">latencyMarkTimer = processingTimeService.scheduleAtFixedRate(</div><div class="line">   <span class="keyword">new</span> ProcessingTimeCallback() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProcessingTime</span><span class="params">(<span class="keyword">long</span> timestamp)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">         <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// ProcessingTimeService callbacks are executed under the checkpointing lock</span></div><div class="line">            output.emitLatencyMarker(<span class="keyword">new</span> LatencyMarker(timestamp, vertexID, subtaskIndex));</div><div class="line">         &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">            <span class="comment">// we catch the Throwables here so that we don't trigger the processing</span></div><div class="line">            <span class="comment">// timer services async exception handler</span></div><div class="line">            LOG.warn(<span class="string">"Error while emitting latency marker."</span>, t);</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">   &#125;,</div><div class="line">   <span class="number">0L</span>,</div><div class="line">   latencyTrackingInterval);</div></pre></td></tr></table></figure>
<p>在Operator中处理：首先进行LatencyMarker处理再发送，<br>在AbstractStreamOperator类中定义的latencyMarker处理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reportLatency</span><span class="params">(LatencyMarker marker, <span class="keyword">boolean</span> isSink)</span> </span>&#123;</div><div class="line">   LatencySourceDescriptor sourceDescriptor = LatencySourceDescriptor.of(marker, !isSink);</div><div class="line">   DescriptiveStatistics sourceStats = latencyStats.get(sourceDescriptor);</div><div class="line">   <span class="keyword">if</span> (sourceStats == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="comment">// 512 element window (4 kb)</span></div><div class="line">      sourceStats = <span class="keyword">new</span> DescriptiveStatistics(<span class="keyword">this</span>.historySize);</div><div class="line">      latencyStats.put(sourceDescriptor, sourceStats);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">long</span> now = System.currentTimeMillis();</div><div class="line">   sourceStats.addValue(now - marker.getMarkedTime());  <span class="comment">//所以latency的计算时间是当前时间减去marker摄入的时间</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="number">1</span>.首先生成一个Latency的描述符，sink operator的区分不同subIndex为不同LatencySource，其他operator不区分subIndex，只按照vertexID来区分</div><div class="line"><span class="number">2</span>.然后生成对应Latency的描述符的最近<span class="string">"historySize:128"</span>个Latency的值（WindowSize controls the number of values that contribute to the reported statistics. ）</div><div class="line"><span class="number">3</span>.在这里值没有在web展示的原因是因为guage展示的不是一个数字，因而无法被展示</div></pre></td></tr></table></figure>
<p>然后只要不是sink类型的operator，就会往后继续传递LatencyMarker。随机选择一个Channel来发送,这里就是为了保证一个latencyMarker在整个流中只会出现一次。这里和watermark的机制有点不一样，waterMark是遍历全部的channel来发送。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">emitLatencyMarker</span><span class="params">(LatencyMarker latencyMarker)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span>(outputs.length &lt;= <span class="number">0</span>) &#123;</div><div class="line">      <span class="comment">// ignore</span></div><div class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span>(outputs.length == <span class="number">1</span>) &#123;</div><div class="line">      outputs[<span class="number">0</span>].emitLatencyMarker(latencyMarker);</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// randomly select an output</span></div><div class="line">      outputs[RNG.nextInt(outputs.length)].emitLatencyMarker(latencyMarker);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>LatencyMarker不会参与窗口时间的计算，应该说是不参与任何operator的计算，因此他只能用来衡量数据在整个DAG中流通的速度不能衡量operator计算的时间，这个只能通过单测来进行计算</strong><br><code>StreamInputProcessor#processInput</code>  这里进行对进入的element进行处理，对于watermark和LatencyMarker类型会先处理发送掉，不会经由后面的windowOperator或其他operator来处理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (result.isFullRecord()) &#123;</div><div class="line">   StreamElement recordOrMark = deserializationDelegate.getInstance();</div><div class="line"> </div><div class="line">   <span class="keyword">if</span> (recordOrMark.isWatermark()) &#123;</div><div class="line">      <span class="keyword">long</span> watermarkMillis = recordOrMark.asWatermark().getTimestamp();</div><div class="line">      <span class="keyword">if</span> (watermarkMillis &gt; watermarks[currentChannel]) &#123;</div><div class="line">         watermarks[currentChannel] = watermarkMillis;</div><div class="line">         <span class="keyword">long</span> newMinWatermark = Long.MAX_VALUE;</div><div class="line">         <span class="keyword">for</span> (<span class="keyword">long</span> watermark: watermarks) &#123;</div><div class="line">            newMinWatermark = Math.min(watermark, newMinWatermark);</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">if</span> (newMinWatermark &gt; lastEmittedWatermark) &#123;</div><div class="line">            lastEmittedWatermark = newMinWatermark;</div><div class="line">            <span class="keyword">synchronized</span> (lock) &#123;</div><div class="line">               streamOperator.processWatermark(<span class="keyword">new</span> Watermark(lastEmittedWatermark));</div><div class="line">            &#125;</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">continue</span>;</div><div class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span>(recordOrMark.isLatencyMarker()) &#123;</div><div class="line">      <span class="comment">// handle latency marker</span></div><div class="line">      <span class="keyword">synchronized</span> (lock) &#123;</div><div class="line">         streamOperator.processLatencyMarker(recordOrMark.asLatencyMarker());</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">continue</span>;</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// now we can do the actual processing</span></div><div class="line">      StreamRecord&lt;IN&gt; record = recordOrMark.asRecord();</div><div class="line">      <span class="keyword">synchronized</span> (lock) &#123;</div><div class="line">         numRecordsIn.inc();</div><div class="line">         streamOperator.setKeyContextElement1(record);</div><div class="line">         streamOperator.processElement(record);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>sink中只进行report不再进行forward了（StreamSink.java）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reportOrForwardLatencyMarker</span><span class="params">(LatencyMarker maker)</span> </span>&#123;</div><div class="line">   <span class="comment">// all operators are tracking latencies</span></div><div class="line">   <span class="keyword">this</span>.latencyGauge.reportLatency(maker, <span class="keyword">true</span>);</div><div class="line"> </div><div class="line">   <span class="comment">// sinks don't forward latency markers</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>LatencyMarker能够较好的监控因网络抖动或数据反压引起的延迟，可以提前预警反压情况</li>
<li>在正常情况（没有反压）下数据在DAG图中的流动延迟大概0.5s左右，所以说Flink的确是一个很快的引擎：）</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于Flink中的Latency track&lt;/p&gt;
    
    </summary>
    
      <category term="源码分析" scheme="yoursite.com/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Flink" scheme="yoursite.com/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>Hexo tutorial</title>
    <link href="yoursite.com/2016/10/12/hello-world/"/>
    <id>yoursite.com/2016/10/12/hello-world/</id>
    <published>2016-10-11T16:47:35.000Z</published>
    <updated>2017-09-10T07:02:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 写文章常用语法</p>
<a id="more"></a>
<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<p>###Create a page </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new page tags</div></pre></td></tr></table></figure>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo 写文章常用语法&lt;/p&gt;
    
    </summary>
    
      <category term="常用命令" scheme="yoursite.com/categories/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="hexo" scheme="yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
